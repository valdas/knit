#!/sw/bin/gawk -f 

# This file was auto-generated by KNIT. Do not edit this file! 
# Built on Thu Feb 25 21:16:35 EST 2010 by timm. 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# http://artofawk.net/?default 
 function default(value, d) {
	 return value=="" ? d: value
 }

# http://artofawk.net/?a2s 
 function a2s(a,sep,  start, stop,  tmp, out,i) { 
     sep   = default(sep,   ",")
     start = default(start, 1)
     stop  = default(stop,  a[0]) 
     out = a[start]
     for(i=start+1;i<=stop;i++)
         out = out sep a[i]     
     return out
 }  

# http://artofawk.net/?o 
 function o(a, str,control,   i,com) {
     str = str ? str : "array"
     if (control ~ /^[0-9]/)  {
         if (control==0)
             o1(a,str)
	 else
             for(i=1;i<=control;i++)
                 print oprim(str,i,a)
     } else
	 if (0 in a)        # sometimes i store array size in a[0]
	     o(a,str,a[0])         
         else {
             com = control ? control : " -n -k 2" 
             com = "sort " com  " #" rand(); # ensure com is unique
             for(i in a)
                 print oprim(str,i,a) | com;
             close(com); }
 }
 function oprim(str,i,a,  j) {
     j=i
     gsub(SUBSEP,",",j) 
     return str "[ " j " ]\t=\t [ " a[i] " ]"
 }
 function oo(a,str, i) {
     for(i in a)
         print oprim(str,i,a)
 }
 function oos(a1,str1,a2,str2,a3,str3,a4,str4,a5,str5) {
     if(str1) oo(a1,str1);
     if(str2) oo(a2,str2);
     if(str3) oo(a3,str3);
     if(str4) oo(a4,str4);
     if(str5) oo(a5,str5)
 }
 function os(a1,str1,a2,str2,a3,str3,a4,str4,a5,str5) {
     if(str1) o(a1,str1);
     if(str2) o(a2,str2);
     if(str3) o(a3,str3);
     if(str4) o(a4,str4);
     if(str5) o(a5,str5)
 }

# http://artofawk.net/?math 
 BEGIN { Pi = 3.14159265
         E  = 2.71828183 
       }
 function oddp(x)  { return (x % 2) }
 function evenp(x) { return (! oddp(x)) }
 function round(x) { return int(x + 0.5) }

# http://artofawk.net/?trim 
 function trim(s) {
	sub(/^[ \t\r\n]*/,"",s)
	sub(/[ \t\r\n]*$/,"",s)
	return s
 } 

# http://artofawk.net/?s2a 
 function s2a(str,a,  sep,  tmp,n,i) {
     sep = sep ? sep : ","
     n= split(str,tmp,sep)
     for(i=1;i<=n;i+=2) 
	 a[trim(tmp[i])]= trim(tmp[i+1])
     return n/2
 }

# http://artofawk.net/?bias 
 function sample(population,cdf,memo,   count,one) { 
     for(one in population) 
         count[population[one]]++
     return sampleCounts(count,cdf,memo)
 }
 function sampleCounts(counts,cdf,memo,   all, one,x,f,i) {
     for(one in counts)
         all += counts[one]
     for(one in counts) {
         x = (1000*counts[one]/all)+ rand()/100
         f[++i]= x
         memo[x] = one
     }
     a2cdf(f,cdf)
     return i
 }
 function a2cdf(a,cdf, sorted,n) {
     n= a2best(a,sorted)
     return sorted2cdf(n,sorted,cdf)
 }
 function a2best(a,best,  max,    sorted,n,i,j) {
                #must     opt     local
     n = asort(a,sorted);
     if (max && n >= max) {
         for(i = n - max + 1; i<=n; i++)
             best[++j] = sorted[i];
         n= max;
     } 
     else 
         for(i in sorted)
             best[i]=sorted[i];
     return n;
 }
 function sorted2cdf(n,sorted,cdf,    i,j,sum) {
     if (! (1 in sorted)) 
         return (cdf[0]=split("",cdf,""))
     sum = cdf[1] = sorted[1];
     for(i=2;i<=n;i++) { 
         sum += sorted[i];
         cdf[i] = cdf[i-1] + sorted[i];
     }
     for(i in cdf)  
         cdf[i] = cdf[i] / sum;
     for(i=1;i<=n;i++)
         cdf[-1*i] = sorted[i]
     cdf[0]=n
     return n
 }
 function pick(cdf,  skew,   i) {
               #must   opt     local
     i = pick1(cdf,cdf[0],skew)
     return cdf[-1*i]
 }
 function pick1(cdf,n,  skew,u,i,here) {
     skew = skew ? skew : 1
     u = rand()^skew 
     for(i=n-1;i>=1;i--) 
         if (u > cdf[i] ) 
             return i+1;
     return 1;
 }

# http://artofawk.net/?stack 
 function push(s,item,  i) {      
     i    = ++s[0]
     s[i] = item
     return i
 }
 function pop(s, i,item) { 
     i    = s[0]--
     item = s[i]
     delete s[i]
     return item
 }
 function push2(c,key,item,   i)  {
     i = ++c[key,0]
     c[key,i] = item
     return i 
 }
 function cards(c,key) { 
     return c[key,0] 
 }
 function card(c,key,n) { 
     return c[key,n] 
 }

# http://artofawk.net/?anyStrings 
 function anyStrings(string,   skew,repeats,sep,             \
                     pmax, paras,para,lines,freq, thing,cdf,memo,out) {
     skew    = default(skew,   1)
     repeats = default(repeat, 1)
     sep     = default(sep,    "\n")
     pmax = split(string,paras,/\n\n/)     
     for(para=1; para<=pmax; para++) {
         lines[0]    = split(paras[para],lines,/\n/)       
         thing       = trim(a2s(lines,"\n",2))
         freq[thing] = lines[1] + 0
     }
     sampleCounts(freq,cdf,memo)
     while(repeats--) 
         push(out,  memo[pick(cdf,skew)])
     return a2s(out,sep)
 }

# http://artofawk.net/?warning 
 function warning(str) {
     print "# ERROR: " str   >> "/dev/stderr";
     fflush("/dev/stderr");
 }

# http://artofawk.net/?barph 
 function barph(str) {
     warning(str)
     exit 1; 
 }

# http://artofawk.net/?assert 
 function assert(check,str) {
     if (! check)
     	barph(str)
 }

# http://artofawk.net/?basename 
 function basename(path,  n,tmp) {
    n = split(path,tmp,/\//)
    return tmp[n]
 }

# http://artofawk.net/?biasDemo 
 function demoBias() {
     srand(1)
     print "\n---| numericBiasDemo |--------"
     numericBiasDemo("1,3,2,4")
     print "\n---| biasPairsDemo |--------"
     pairsBiasDemo("durian,1,banana,3,carrot,2,apple,4")
     print "\n---| discreteBiasDemo |--------"
     discreteBiasDemo("apple,banana,carrot,durian,"\
                      "apple,banana,carrot,apple,banana,apple")
 }
 function pairsBiasDemo(data,  n,pairs,i,all,cdf,count,memo,max,r,com) {
 	  print data
     n= s2a(data,pairs,",")
     sampleCounts(pairs,cdf,memo)
     max=r=10000; 
     while(--r)
         count[memo[pick(cdf)]]++
     # reporting
     com = "sort -n"
     for(i in count)
         print i " " count[i] " (" round(100*count[i]/max) "%)" | com
     close(com)
 }
 function numericBiasDemo(frequencies,  \
                          n,a,cdf,max,r,i,count,com) {
     n=split(frequencies,a,",")
     #set up
     a2cdf(a,cdf)
     # generating
     max=r=10000; 
     while(--r)
         count[pick(cdf)]++
     # reporting
     com = "sort -n"
     for(i in count)
         print i " " count[i] " (" round(100*count[i]/max) "%)" | com
     close(com)
 }
 function discreteBiasDemo(things,       all,a,cdf,memo,max,r,i,com,count) {
     split(things,a,",")
     #set up 
     all = sample(a,cdf,memo)
     # digression: showing off some internals
     oo(cdf,"cdf")          
     oo(memo,"memo")
     # generating
     max=r=10000;  
     while(--r)
         count[memo[pick(cdf)]]++ # memo maps numbers to symbols
     # reporting
     com = "sort -n -k 2"
     for(i in count)
         print i " " count[i] " (" round(100*count[i]/max) "%)" | com
     close(com)     
 }

# http://artofawk.net/?deShell 
 function deShell(str) {
     gsub(/["`\$;\|&><]/,"",str);
     return str
 }

# http://artofawk.net/?slurp 
 function slurp(com,all, sep) { 
     return split(slurp2String(com),
		  all, 
		  (sep ? sep : "\n")) 
 }
 function slurp2String(com,    txt,filename,fnr,nf,nr,rs,fs ) {
     filename=FILENAME;fnr=FNR;nf=NF;nr=NR;rs=RS;fs=FS;
     RS="\r\r\n"; FS="\r\r\n"; # change globals 
     com = deShell(com)        # make 'com0' safe
     com | getline txt ;       # everything is in 'txt'
     close(com);               # close pipe
     FILENAME=filename;FNR=fnr;NF=nf;NR=nr;RS=rs;FS=fs;
     return txt                # the end
 }

# http://artofawk.net/?cat 
 function demoCat(   n,all) {
     n=cat("cat.wak",all)
     o(all,"cat",n)
 }
 function cat(file,all,sep) { 
    return slurp("cat " file,all,sep) 
 }

# http://artofawk.net/?change 
 function change(old,new,str) {
     return gensub(old,new,"g",str)
 }

# http://artofawk.net/?copyleft 
 function copyleft() {
    about();
    print ""
    print "This program is free software: you can redistribute it and/or modify"
    print "it under the terms of the GNU General Public License as published by"
    print "the Free Software Foundation, either version 3 of the License, or"
    print "(at your option) any later version."
    print ""
    print "This program is distributed in the hope that it will be useful,"
    print "but WITHOUT ANY WARRANTY; without even the implied warranty of"
    print "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
    print "GNU General Public License for more details."
    print ""
    print "You should have received a copy of the GNU General Public License"
    print "along with this program.  If not, see <http://www.gnu.org/licenses/>."
    print ""
 }
 function about() {
    print Opt["What"] " : " Opt["Why"];
    print "Copyright " Opt["When"] " " Opt["Who"] " (GPL version 3)";
 }

# http://artofawk.net/?factorial 
 function factorial(n,  result,i) {
    result = 1;
	if (n < 1) return result;
	for(i=2;i<=n;i++)
		result *= n
	return result
 }

# http://artofawk.net/?wget 
 function demoWget(   n,all,url) {
     url="knit.googlecode.com/svn/branches/0.2/quill/etc/tests/demoWget.rss"
     n=wget(url,all,">")
     o(all,"wget",n) 
 }
 function wget(url,all,sep) { 
    return slurp("wget -q -O - http://" url,all,sep) 
 }

# http://artofawk.net/?myrss 
 function demoRss() {  
     print "<ul>"
     print  "<li>" myrss("lawker.blogspot.com/feeds/posts/default?alt=rss",
			 5,
			 "\n<li>")  
     print "</ul>"
 }
 function myrss(feed,max,between,              \
                 date,url,author,link,txt,title,	\
                n,all,sep,out,seen,x,i) {
     n = wget(feed,all,">");
     for(i=1;i<=n; i++) {
	 x= all[i]= trim(all[i])
         # parse the items
	 if      (x ~ /^<pubDate/ )    date   = myDate(all,i)
	 else if (x ~ /^<description/) txt    = myText(all,i)
	 else if (x ~ /^<title/)       title  = myField(all,i)
	 else if (x ~ /^<author/)      author = myField(all,i)
	 else if (x ~ /^<link/)        link   = myField(all,i)
	 else if (x ~ /^<enclosure/)   url    = myEnclosure(all,i);
         # if we have everything, generate an output
	 if (date && txt && title && author && link && url) {
	     out = out sep myReport(url,date,title,author,link,txt);
	     sep = between ? between : "\n";
	     date = txt = title = author = link = url = ""
	     if (++seen >= max) 
		 return out;
	 }}
     return out;
 }
 function myField(all,i,    str) {
     str = all[i+1] 
     sub(/<.*/,"",str);    
     return str 
 }
 function myDate(all,i, tmp) {
    split(all[i+1],tmp," ");   
    return trim(tmp[3]  " " tmp[2])
 } 
 function myText(all,i,    str) {
     str = all[i+1] 
     sub(/&lt;.*/,"",str); 
     return trim(str) 
 }
 function myEnclosure(all,i,   tmp) {
     split(all[i],tmp,/'/);
     return trim(tmp[4])
 }
 function myReport(url,date,title,author,link,txt) {
     return "<a href=\"" url "\">" date "</a>:\n " txt
 }

# http://artofawk.net/?options 
 function opt(x) {
     if  (x in Opt) 
		return Opt[x] 
	else
	 	barph(Opt["What"] " option ["x"] unknown")
 }
 function ok2go(opt,str) { # returns 0 if bad options
     s2a("a=;c=;h=;" str,opt,"[=;]")
     ARGC = ok2go1(opt,ARGV,ARGC)
     if (opt("c")) exit copyleft();
     if (opt("a")) exit about();    
     if (opt("h")) exit help();
     return 1
 }
 function ok2go1(opt,input,n,  key,i,j,k,tmp) {
     for(i=1;i<=n;i++)  { # 1: explore argstill no more flags
	 	key = input[i]
	 if (sub(/^[-]+/,"",key))  { # 1a: we have a new flag
	     if (key in opt)         # 1b: if legal flag, change its value
		 	# 1c: if upper case flag grab value from command line 
		 	opt[key] = (key ~ /^[A-Z]/) ? input[++i] : 1
	     else 
			barph("-"key" unknown. Try -h for help.")
	 } else { 
			i--; break 
		}
     }
     for(j=i+1;j<=n;j++)  # 2: clear the flags from n, input 
	 	tmp[j-i]=input[j]
     split("",input,"")
     for(k in tmp) 
	 	input[k] = tmp[k]
     n -= i
     return n
 }

# http://artofawk.net/?phrases 
 function phrases(str,sep,a,    n,i) {
    n=split(str,a,sep)
    for(i=1;i<=n;i++)
		a[i]= trim(a[i])
    return n
 }

# http://artofawk.net/?prints 
 function prints(a0,b0,c0,d0,e0,f0,g0,h0,i0,j0,k0,l0,m0,n0,o0,p0,q0,r0,s0,t0,u0,v0,w0,x0,y0,z0,\
                 a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,r1,s1,t1,u1,v1,w1,x1,y1,z1,\
                 a2,b2,c2,d2,e2,f2,g2,h2,i2,j2,k2,l2,m2,n2,o2,p2,q2,r2,s2,t2,u2,v2,w2,x2,y2,z2,\
                 a3,b3,c3,d3,e3,f3,g3,h3,i3,j3,k3,l3,m3,n3,o3,p3,q3,r3,s3,t3,u3,v3,w3,x3,y3,z3,\
                 a4,b4,c4,d4,e4,f4,g4,h4,i4,j4,k4,l4,m4,n4,o4,p4,q4,r4,s4,t4,u4,v4,w4,x4,y4,z4,\
                 a5,b5,c5,d5,e5,f5,g5,h5,i5,j5,k5,l5,m5,n5,o5,p5,q5,r5,s5,t5,u5,v5,w5,x5,y5,z5,\
                 a6,b6,c6,d6,e6,f6,g6,h6,i6,j6,k6,l6,m6,n6,o6,p6,q6,r6,s6,t6,u6,v6,w6,x6,y6,z6,\
                 a7,b7,c7,d7,e7,f7,g7,h7,i7,j7,k7,l7,m7,n7,o7,p7,q7,r7,s7,t7,u7,v7,w7,x7,y7,z7,\
                 a8,b8,c8,d8,e8,f8,g8,h8,i8,j8,k8,l8,m8,n8,o8,p8,q8,r8,s8,t8,u8,v8,w8,x8,y8,z8,\
                 a9,b9,c9,d9,e9,f9,g9,h9,i9,j9,k9,l9,m9,n9,o9,p9,q9,r9,s9,t9,u9,v9) {
   prints26(a0,b0,c0,d0,e0,f0,g0,h0,i0,j0,k0,l0,m0,n0,o0,p0,q0,r0,s0,t0,u0,v0,w0,x0,y0,z0);
   prints26(a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1,l1,m1,n1,o1,p1,q1,r1,s1,t1,u1,v1,w1,x1,y1,z1);
   prints26(a2,b2,c2,d2,e2,f2,g2,h2,i2,j2,k2,l2,m2,n2,o2,p2,q2,r2,s2,t2,u2,v2,w2,x2,y2,z2);
   prints26(a3,b3,c3,d3,e3,f3,g3,h3,i3,j3,k3,l3,m3,n3,o3,p3,q3,r3,s3,t3,u3,v3,w3,x3,y3,z3);
   prints26(a4,b4,c4,d4,e4,f4,g4,h4,i4,j4,k4,l4,m4,n4,o4,p4,q4,r4,s4,t4,u4,v4,w4,x4,y4,z4);
   prints26(a5,b5,c5,d5,e5,f5,g5,h5,i5,j5,k5,l5,m5,n5,o5,p5,q5,r5,s5,t5,u5,v5,w5,x5,y5,z5);
   prints26(a6,b6,c6,d6,e6,f6,g6,h6,i6,j6,k6,l6,m6,n6,o6,p6,q6,r6,s6,t6,u6,v6,w6,x6,y6,z6);
   prints26(a7,b7,c7,d7,e7,f7,g7,h7,i7,j7,k7,l7,m7,n7,o7,p7,q7,r7,s7,t7,u7,v7,w7,x7,y7,z7);
   prints26(a8,b8,c8,d8,e8,f8,g8,h8,i8,j8,k8,l8,m8,n8,o8,p8,q8,r8,s8,t8,u8,v8,w8,x8,y8,z8);
   prints26(a9,b9,c9,d9,e9,f9,g9,h9,i9,j9,k9,l9,m9,n9,o9,p9,q9,r9,s9,t9,u9);
 }
 function prints26(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) {
   if (a) {print prints1(a) } else {return 1};
   if (b) {print prints1(b) } else {return 1};
   if (c) {print prints1(c) } else {return 1};
   if (d) {print prints1(d) } else {return 1};
   if (e) {print prints1(e) } else {return 1};
   if (f) {print prints1(f) } else {return 1};
   if (g) {print prints1(g) } else {return 1};
   if (h) {print prints1(h) } else {return 1};
   if (i) {print prints1(i) } else {return 1};
   if (j) {print prints1(j) } else {return 1};
   if (k) {print prints1(k) } else {return 1};
   if (l) {print prints1(l) } else {return 1};
   if (m) {print prints1(m) } else {return 1};
   if (n) {print prints1(n) } else {return 1};
   if (o) {print prints1(o) } else {return 1};
   if (p) {print prints1(p) } else {return 1};
   if (q) {print prints1(q) } else {return 1};
   if (r) {print prints1(r) } else {return 1};
   if (s) {print prints1(s) } else {return 1};
   if (t) {print prints1(t) } else {return 1};
   if (u) {print prints1(u) } else {return 1};
   if (v) {print prints1(v) } else {return 1};
   if (w) {print prints1(w) } else {return 1};
   if (x) {print prints1(x) } else {return 1};
   if (y) {print prints1(y) } else {return 1};
   if (z) {print prints1(z) } else {return 1};
 }
 function prints1(x) { # if starts with a " ", then indent this string
   return x ~ /^ /  ? "       "x : x; 
 }

# http://artofawk.net/?seed 
 function seed() {
    srand(Seed ? Seed : 1)
 }

# http://artofawk.net/?slots 
 function slots(slotsFile,frameFile,      values,sep) {
     sep="`""`"
     loadSlots(slotsFile,sep,values)   
     fillFrame(frameFile,sep,values)
 }
 function loadSlots(slots,sep,values,   n,i,all) {
     n=slurp(slots,all,sep)
     for(i=2; i<=n; i += 2) 
	 values[trim(all[i])] = trim(all[i+1]);
 }
 function fillFrame(frame,sep,values,   all,n,i) {
     print fillFrame2String(frame,sep,values)
 }
 function fillFrame2String(frame,sep,values,   all,n,i,str) {
     n=slurp(frame,all,sep);
     for(i=1; i<=n; i++)  
	 str = str sprintf("%s", (oddp(i) ? all[i] : fillSlot(all[i],values)))
     return str
 } 
 function fillSlot(str,values) {
     return (str ~ /;/ ? slotsPlugIns(str,values) : values[str])
}

# http://artofawk.net/?slotsDemo 
 function demoSlots(     get, data,frame1, slots1) {
    get    = "wget -q -O - "
    data   = "http://knit.googlecode.com/svn/branches/0.2/quill/etc/tests/" 
    frame1 = get data "frame1.txt"
    slots1 = get data "slots1.txt"
    slots(slots1,frame1)
 }
 function slotsPlugIns(string,values,      tmp) {   
    split(string,tmp,";")
    if (tmp[1]=="rss")
       return myrss(tmp[2],tmp[3])
    if (tmp[1]="any")
        return anyStrings(values[tmp[2]],tmp[3],5)
    barph("(" string ") ???") 
 }

# http://artofawk.net/?splot 
 function splot(string,array,   sep) {
    array[0]= split(string,array, sep)
 }

# http://artofawk.net/?stackDemo 
 function demoStacks(   n,tmp,i,a) {
     n=split("a,b,c",tmp,",")
     for(i=1;i<=n;i++) {
         push(a,tmp[i])
         print "\n=== " i "========"
         for(i in a) 
             print i " = " a[i]
     }
     o(a,"a")
  }

# http://artofawk.net/?quill 
 function demoQuill() { print "This is Quill." }
