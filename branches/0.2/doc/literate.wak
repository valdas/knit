# -*- mode: Awk; -*-  vim: set filetype=awk : 
#
# This file is part of KNIT; copyright (C) 2010 by Tim Menzies
# tim@menzies.us.
#
# KNIT is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# KNIT is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with KNIT.  If not, see <http://www.gnu.org/licenses/>.


Literate Programming

According to [http://www.perl.com/pub/a/tchrist/litprog.html Jason
Dominus], literate programming systems have the following properties.

_Code and extended, detailed, comments are intermingled._
Here, to write code, just start a new paragraph with a space or a tab.
All other paragraphs are comments and these are written in a
easy-to-read, easy-to-write plain text format called MARKUP (see below).

_The program and its documentation can be handsomely typeset into a
single article that explains the program and how it works._ Rather
than typeset, we use HTML. But the results are the same: pretty
displays of lots of code.

_The code sections can be written in whatever order is best for
people to understand, and are re-ordered automatically when the
computer needs to run the program._ This site does not support
this directly. However, code can be broken into many tiny files, then
described in an order best suited for some narrative.

MARKUP (introduction)
=====================

MARKUP is based on John Gruber's excellent
[http://daringfireball.net/projects/markdown MARKDOWN] system. It
includes small extensions, so it can support KNIT better.

MARKUP generates ".html" files from a ".wak" file.  Inside the ".wak"
file, MARKUP assumes that the code and comments exist together.

In the file, the first two paragraphs of a page are special. 

+ The first paragraph is completely ignored. This is useful if 
  the first para contains either directives or comments (e.g.
  relating to copyright or version control).
+ The second paragraph becomes the heading of the page.

After that, paragraphs are rendered as HTML code.  If paragraphs start
with blanks or tabs, they are rendered verbatim (using the HTML
&lt;pre>) tag. Other paragraphs are rendered using full HTML (italics,
bolds, etc).

For example, in the following sample, para one is skipped, para two
becomes the heading for the page, and the remaining text is rendered
in HTML

  # -*- mode: Awk; -*-  vim: set filetype=awk : 
  #
  # This file is part of KNIT; copyright (C) 2010 by Tim Menzies
  # tim@menzies.us.

  This is the heading of this page

  An H1 Heading
  =============

  Paragraphs start after a blank line.

  + Lists are marked with a plus..
  + ... in the first column.

  Also, numbered lists start with left-hand-side numbers.

  1. Like this.
  1. The actual number does not matter.
  3. E.g. this list will be rendered as 1,2,3.

  Italics is marked by _underscores_ and bolds are marked by *stars*.

   function code(arg1,arg2) {
      # This para started with white space. 
      # So it will be rendered exactly.
      return arg1 + arg2
   }

Syntax
======

Headings
--------

Headings are marked up either in-line, or on their next-line:

In-line mark up
++++++++++++++

The following sample gets marked up as a big, not-so-big, smaller, smallest heading (respectively):

  ===== BIG =====

  ==== Not-so-big ====

  === Smaller ===

  == Smallest ==

Next-line mark up
++++++++++++++

The following sample gets marked up as a big, not-so-big, smaller, smallest heading (respectively):

  BIG 
  ===

  Not-so-big 
  ==========

  Smaller
  =======

  Smallest
  ========

Paragraphs
----------

Paragraphs are seperated by blank lines.  

Note that a line containing only tabs and space characters is _not_ blank.
If your paragraph looks funny, check that the line above is actually blank.

Verbatim Paragraghs
-------------------

Verbatim paragraphs are rendered as pre-formatted text (using the HTML
&lt;pre>) tag. In verbatim paragraphs, any "&lt;" is replaced by "&amp;lt;" 
(so any HTML used in yur code will get displayed correctly).

It is a useful to distinguish _two_ of verbatims. Firstly, there is
code that should be passed on to some interpreter/compiler.  Secondly,
there is some text that should just be rendered verbatim (e.g. showing
sample output from a function) but which should not be passed on. One
convention for this is to:

+ start code paragraphs with one character of whitespace 
+ start vertbatim paragraphs with two whitespace characters.

Lists
-----

Unnumbered lists start with a "\*", ",\+", "\-" character at front-of-line.

HTML
----

MARKUP does not alter  HTML tags (those starting with &lt;; e.g. 
"&lt;em>"). This means that for special rendering jobs (e.g. tables), 
it is possible to use HTML tags within MARKUP files.

Note one restriction: the table of contents generated on top of MARKUP file
will not include any heading tags that you enter as raw HTML; e.g.
&lt:h1>,
&lt:h2>,
&lt:h3>, etc.


Author
======

Tim Menzies
