printf "\n----| eg2 |--------------\n\n"; /opt/local/bin/gawk     --dump-variables="/Users/timm/tmp/vars.out" --profile="/Users/timm/tmp/profile.out" -f ../site/src/copyleft.awk -f ../site/src/warning.awk -f ../site/src/barph.awk -f ../site/src/trim.awk -f ../site/src/s2a.awk -f ../site/src/options.awk -f ../site/src/prints.awk -f ../site/src/helloworld.awk ; cat /Users/timm/tmp/profile.out | sed '1d' ; cat /Users/timm/tmp/vars.out | egrep -v '^[A-Z]+:' 

----| eg2 |--------------

hello world

	# BEGIN block(s)

	BEGIN {
		if (! Test) {
			main()
		}
	}

	# Rule(s)

	{
		print (opt("Say") " " opt("To") ", you " ($0) ".")
	}

	# Functions, listed alphabetically

	function about()
	{
		print (Opt["What"] " : " Opt["Why"])
		print ("Copyright " Opt["When"] " " Opt["Who"] " (GPL version 3)")
	}

	function barph(str)
	{
		warning(str)
		exit 1
	}

	function copyleft()
	{
		about()
		print ""
		print "This program is free software: you can redistribute it and/or modify"
		print "it under the terms of the GNU General Public License as published by"
		print "the Free Software Foundation, either version 3 of the License, or"
		print "(at your option) any later version."
		print ""
		print "This program is distributed in the hope that it will be useful,"
		print "but WITHOUT ANY WARRANTY; without even the implied warranty of"
		print "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
		print "GNU General Public License for more details."
		print ""
		print "You should have received a copy of the GNU General Public License"
		print "along with this program.  If not, see <http://www.gnu.org/licenses/>."
		print ""
	}

	function help()
	{
		about()
		prints(" ", "usage: helloworld [OPTIONS] [qualifiers]", " ", " -a          About", " -i          Interactive mode. Prints hello, plus", "             one qualifier per line of input.", " -To Who     Address the greeting to 'Who'", " -Say What   Start the greeting with 'Say'", " -c          Copyright", " -h          Help")
	}

	function main()
	{
		ok2go(Opt, ("What=Hello World;Why=saying hi!;When=2010;Who=Tim Menzies;" "To=world;Say=hello;i="))
		if (! opt("i")) {
			print (opt("Say") " " opt("To"))
			exit
		}
	}

	function ok2go(opt, str)
	{
		s2a(("a=;c=;h=;" (str)), opt, "[=;]")
		ARGC = options(opt, ARGV, ARGC)
		if (opt("c")) {
			exit copyleft()
		}
		if (opt("a")) {
			exit about()
		}
		if (opt("h")) {
			exit help()
		}
		return 1
	}

	function options(opt, input, n, key, i, j, k, tmp)
	{
		for (i = 1; i <= n; i++) {
			key = input[i]
			if (sub(/^[-]+/, "", key)) {
				if (key in opt) {
					opt[key] = key ~ /^[A-Z]/ ? input[++i] : 1
				} else {
					barph(("-" (key) " unknown. Try -h for help."))
				}
			} else {
				i--
				break
			}
		}
		for (j = i + 1; j <= n; j++) {
			tmp[j - i] = input[j]
		}
		split("", input, "")
		for (k in tmp) {
			input[k] = tmp[k]
		}
		n -= i
		return n
	}

	function opt(x)
	{
		return x in Opt ? Opt[x] : barph((Opt["What"] " option [" (x) "] unknown"))
	}

	function prints(a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0, a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1, a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2, a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3, a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4, a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5, a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6, a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7, a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8, a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9, v9)
	{
		prints26(a0, b0, c0, d0, e0, f0, g0, h0, i0, j0, k0, l0, m0, n0, o0, p0, q0, r0, s0, t0, u0, v0, w0, x0, y0, z0)
		prints26(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, n1, o1, p1, q1, r1, s1, t1, u1, v1, w1, x1, y1, z1)
		prints26(a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, k2, l2, m2, n2, o2, p2, q2, r2, s2, t2, u2, v2, w2, x2, y2, z2)
		prints26(a3, b3, c3, d3, e3, f3, g3, h3, i3, j3, k3, l3, m3, n3, o3, p3, q3, r3, s3, t3, u3, v3, w3, x3, y3, z3)
		prints26(a4, b4, c4, d4, e4, f4, g4, h4, i4, j4, k4, l4, m4, n4, o4, p4, q4, r4, s4, t4, u4, v4, w4, x4, y4, z4)
		prints26(a5, b5, c5, d5, e5, f5, g5, h5, i5, j5, k5, l5, m5, n5, o5, p5, q5, r5, s5, t5, u5, v5, w5, x5, y5, z5)
		prints26(a6, b6, c6, d6, e6, f6, g6, h6, i6, j6, k6, l6, m6, n6, o6, p6, q6, r6, s6, t6, u6, v6, w6, x6, y6, z6)
		prints26(a7, b7, c7, d7, e7, f7, g7, h7, i7, j7, k7, l7, m7, n7, o7, p7, q7, r7, s7, t7, u7, v7, w7, x7, y7, z7)
		prints26(a8, b8, c8, d8, e8, f8, g8, h8, i8, j8, k8, l8, m8, n8, o8, p8, q8, r8, s8, t8, u8, v8, w8, x8, y8, z8)
		prints26(a9, b9, c9, d9, e9, f9, g9, h9, i9, j9, k9, l9, m9, n9, o9, p9, q9, r9, s9, t9, u9)
	}

	function prints26(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)
	{
		if (a) {
			print prints1(a)
		} else {
			return 1
		}
		if (b) {
			print prints1(b)
		} else {
			return 1
		}
		if (c) {
			print prints1(c)
		} else {
			return 1
		}
		if (d) {
			print prints1(d)
		} else {
			return 1
		}
		if (e) {
			print prints1(e)
		} else {
			return 1
		}
		if (f) {
			print prints1(f)
		} else {
			return 1
		}
		if (g) {
			print prints1(g)
		} else {
			return 1
		}
		if (h) {
			print prints1(h)
		} else {
			return 1
		}
		if (i) {
			print prints1(i)
		} else {
			return 1
		}
		if (j) {
			print prints1(j)
		} else {
			return 1
		}
		if (k) {
			print prints1(k)
		} else {
			return 1
		}
		if (l) {
			print prints1(l)
		} else {
			return 1
		}
		if (m) {
			print prints1(m)
		} else {
			return 1
		}
		if (n) {
			print prints1(n)
		} else {
			return 1
		}
		if (o) {
			print prints1(o)
		} else {
			return 1
		}
		if (p) {
			print prints1(p)
		} else {
			return 1
		}
		if (q) {
			print prints1(q)
		} else {
			return 1
		}
		if (r) {
			print prints1(r)
		} else {
			return 1
		}
		if (s) {
			print prints1(s)
		} else {
			return 1
		}
		if (t) {
			print prints1(t)
		} else {
			return 1
		}
		if (u) {
			print prints1(u)
		} else {
			return 1
		}
		if (v) {
			print prints1(v)
		} else {
			return 1
		}
		if (w) {
			print prints1(w)
		} else {
			return 1
		}
		if (x) {
			print prints1(x)
		} else {
			return 1
		}
		if (y) {
			print prints1(y)
		} else {
			return 1
		}
		if (z) {
			print prints1(z)
		} else {
			return 1
		}
	}

	function prints1(x)
	{
		return x ~ /^ / ? ("       " (x)) : x
	}

	function s2a(str, a, sep, tmp, n, i)
	{
		sep = sep ? sep : ","
		n = split(str, tmp, sep)
		for (i = 1; i <= n; i += 2) {
			a[trim(tmp[i])] = trim(tmp[i + 1])
		}
		return n / 2
	}

	function trim(s)
	{
		sub(/^[ \\t\\r\\n]*/, "", s)
		sub(/[ \\t\\r\\n]*$/, "", s)
		return s
	}

	function warning(str)
	{
		print(("# ERROR: " (str))) >> "/dev/stderr"
		fflush("/dev/stderr")
	}
Opt: array, 10 elements
Test: string ("")
