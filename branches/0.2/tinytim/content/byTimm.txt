#12345####################################################################################

tinytim
Feb10 TinyTim  Timm

TinyTim 

Tiny Tim, the man, was a legendary ukulele singer in the 1960s who sold albums with names like "I've never seen
a straight banana". He is most famous for his falsetto/vibrato rendition of "Tiptoe Through the Tulips".
At the peak of his popularity he was earning $60,000 a week in Las Vegas, playing to sellout crowds at Caesar's Palace. 

TINY TIM, the software program, is  a tiny web-site manager written in AWK. 
The site you are now reading was auto-generated using TINY TIM.

The site was written to demonstrate that a little AWK goes a long way. 
At the time of this writing, the  current system is under 100 lines
of code (excluding a seperate formatter, that is another 170 lines of code).
It took longer to write this doco and the various HTML/CSS theme files, than the actual code itself (fyi: 6 hours for the themes/doc
and 3 hours for the code).

TINY TIM has the following features:

+ Pages can be accessed by their (lowercase)  name, or by their (uppercase) tags. 
+ Pages can be displayed using a set of customizable themes. 
+ Page contents can be written using a HTML shorthand language called MARKUP.
+ Pages can be searched using a Google search box.
+ Source code is auto-displayed using a syntax highlighter.
+ Page content can be auto-created via programmer-modifable plugins.

For a live demo of the site, see [http://at.ttoy.net/?tinytim].
Note that the quote shown top right is auto-generated by a plugin.

Install
=======

In a web accessible directory, type

 svn export http://knit.googlecode.com/svn/branches/0.2/tinytim/ 

In the resulting directory, perform the local juju required to make index.cgi web-runnable
(e.g. on my ISP, `chmod u+rx index.cgi`).

Follow the directions in the next section to customize the site.

Using TINY TIM
==============

index.cgi
---------

TINY TIM is controlled by the following `index.cgi` file.
To select a theme, comment out all but _one_ of the last lines (using the "#" character).
For a screen-shots of the current themes, see below.

 #!/bin/bash
 
 [ -n "$1" ] && export QUERY_STRING="$1"
 
 tinytim() {
	cat content/* themes/$1/theme.txt |
	gawk -f lib/tinytim.awk |
	sed 's/^<pre>/<script type="syntaxhighlighter" class="brush: cpp"><![CDATA[/' |
	sed 's/^<\/pre>/<\/script>/'
 } 
  
 #tinytim auklet
 #tinytim trendygreen
 tinytim wink

Notes:

+ The `sed` commands: these render normal &lt;pre> using [http://alexgorbatchev.com/wiki/SyntaxHighlighter Alex Gorbatchev]'s excellent syntax highlighter. To change the highlighting rules for a different language, change `brush: cpp` to one of the [http://alexgorbatchev.com/wiki/SyntaxHighlighter:Brushes supported aliases].
+ The `cat` command: this assembles the content for the system. Multiple authors can write multiple files in the  sub-directorty `content`.

Themes
------

Themes are defined in the sub-directory `themes/themename`.
Each theme is defined by a `theme.txt` file that holds:

+ The HTML template for the  theme.
+ The in-line style sheet for the theme.
+ The page contents with pre-defined string names marked with \`\`; e.g. \`\`title\`\`. To change those strings, see the instructions at the end of this page.
+ If a \`\` entry contains a semi-colon (e.g. \`\`quotes;\`\`) then it is a plugin. Plugin content is generated at runtime using a method described at the end of this document.

To write a new theme:

1. Create a new folder `themes/new`.
2. Copy (e.g.) `wink/theme.txt` to `new`.
3. Using the copied theme as a template, start tinkering.

The following themes are defined in the directory `themes`.

Auklet:

[img/auklet.png border=1 width=500]

Trendygreen
(adapted from  [http://gettemplates.com GetTemplates]):

[img/trendygreen.png border=1 width=500]

Wink:

[img/wink.png border=1 width=500]

Defining String Values
----------------------

The first entry in the content defines strings that can slip into the theme templates. For example,
the following slots define the _title_ of a site; the name of _formatter_ script that renders each page;
the url of the _home_ directory of the site; a _menu_ to add top of each page; a _footer_ to
add to the bottom of each page; and a web-accessible directory for storing _images_.

 &#96;&#96;title&#96;&#96;       Just another Tiny Tim demo
 &#96;&#96;formatter&#96;&#96;   lib/markup.awk
 &#96;&#96;description&#96;&#96; (simple cms)
 &#96;&#96;home&#96;&#96;        http://at.ttoy.net
 &#96;&#96;menu&#96;&#96;        <a href="?index">Home</a> | 
                 <a href="?contact">Contact</a>  |
                 <a href="?about">About</a>
 &#96;&#96;footer&#96;&#96;      <p>Powered by <a href="?tinytim">TINY TIM</a>. 
                                 &copy; 2010 by Tim Menzies 
 &#96;&#96;images&#96;&#96;      http://at.ttoy.net/img

Note the following important convention.
TINY TIM auto-generates  some of its own strings. The names of these strings start with an uppercase letter.
To avoid confusion of your strings with those that are
auto-generated, it is best to start your strings with a lower-case letter (e.g. like all those in the above example.

Adding a Search Engine
----------------------

Google offers a nice free site-specific search engine. It takes a few days for the spiders to find the site but after that, it works fine.
To set this up, follow the instructions at [http://www.google.com/cse/ Google custom search], then

+ Add the appropriate magic strings into the first entry of the content (usually `content/0config.txt`).
+ Add references to those strings to your template.

For example, look for `google-search` in the current templates and `content/0config.txt`.


Writing pages
-------------

After the first entry, the rest of the entries in the `content/*` define the pages of a site. Each entry must begin with the magic string

+ Each entry must begin with the magic string &#35;12345
+ The entry consists of paragraphs (separated by blank lines.
+ Paragraph one contains the (short) page name (on line one) following by the page tags (on line two).
  + Note that the page name must start with a lower case letter.
  + And the tags must start with an upper case letter.
+ Paragraph two contains the heading of the page.
+ The remaining paragraphs are the page contents.

For example, this site contains a [?404 missing page] report. This page is defined as follows.
In the following definition of that page,
the _name_ is "404"; the tags are "Admin Feb10" and the title is "Sorry".

 &#35;12345&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;&#35;
 
 404
 Admin Feb10
  
 Sorry
  
 I have bad news:
 
 <center>
 [img/404book.jpg]
 </center>

The contents can contain HTML and MARKUP tags.

MARKUP
------

MARKUP is a shorthand for writing HTML pages based on MARKDOWN:

+ _Italics_, *bold*, `typerwritter font` are marked by matching \_, \*, and \` characters (respectively).
+ Lists are marked by leading "+" characters.
+ Numbered lists are marked by leading "1." strings.
+ Links are enclosed in `\[square brackets\]`. The first word in the bracket is the URL and subsequent words are the text for the URL link.
+ Images are marked up with the same `\[square brackets\]`, but the first work must end in one of .png, .gif, .jpg. Any subsequent words are passed as tags to the `&lt;img>` tag.

Also, in MARKUP,  major, minor, sub-, and sub-sub- headings are two
line paragraphs where the second line contains two or more "=", "-",
"+", "_" (respectively).  MARKUP collects these headings as a table of contents, which is added to the top of the page.

Note that MARKUP is separate to TINY TIM. To change the formatting of pages, write your own AWK code and change the string \`\`formatter\`\` in
the first entry of `content/0config.txt`.

Plugins
-------

If a \`\` entry contains a semi-colon (e.g. \`\`quotes;\`\`) then it is a plugin. Plugin content is generated at runtime. 
To write a plugin, modify the file `lib/plugins.awk`. Currently, that file looks like this:

 function slotsPlugIns(str,slots,   tmp) {
     split(str,tmp,";")
     if (tmp[1]=="quotes")
         return quotes(slots["quotes"])
     return str
 }
 function quotes(q,    n,tmp) {
     srand(systime() + PROCINFO["pid"])
     n=split(q,tmp,"\n")
     return tmp[int(rand()*n) + 1]
 }

The function `slotsPlugIns` is a "traffic-cop" who decides what plugin to call
(in the above, there is only one current plugin: `quotes`).

Each plugin function (e.g. `quotes`) is  

Copyright
=========

Copyright (C) 2010 by Tim Menzies,  tim@menzies.us.

TINY TIM is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

TINY TIM is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with TINY TIM.  If not, see [http://www.gnu.org/licenses/].

Author
======

Tim Menzies



