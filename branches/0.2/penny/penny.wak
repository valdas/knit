# -*- mode: Awk; -*-  vim: set filetype=awk : 

A minimal CMS.

@uses tags queryString

function penny(config) {
    return penny1("http://" config,ENVIRON["QUERY_STRING"])
}
function penny1(slotsFile,query,     sep,values,files,titles,tags,sgat,pages,file,url,content,out) {
    sep="``"
    loadSlots("wget -O - "slotsFile,sep,values) # get all the short string values
    loadTags(values["tags"],   files,titles,tags,sgat) # get all the page tags
    values["Title"]  = queryString1(query,tags,files,titles,sgat,pages) # list the required pages
    values["Content"]=""
    if (pages[0] == 0)
        push(pages,values["Default"])
    for(i=1;i<=pages[0];i++) {
        file = values["File"] = pages[i]
        url  = values["Url"]  = "http://" values[site] "/" file
        content = content fillFrame2String(url,sep,values)
    }
    values["Content"] = cotent
    fillFrame(values["template"],sep,values)     
 }

# loads the tas, load the config

# BEGIN {print 1111}

# Does some cool things
# =====================

#  BEGIN { 
#   Sep="``"; 
#   if (!Test) 
#     main("slots.txt"); 
#  }

# Support Stuff
# -------------

#  function main(file,    fillers,files,q,tags) {
#    print "Content-type: text/html\n\n";
#    loadFillers(file,fillers); 
#    loadMap( fillers["siteMap"]);
#    queryString(fillers,files);
#    o(files,"files");
#    fill(   fillers["slots"],fillers);
#  }
#  function slurp(com,sep) { 
#    RS=""; FS=(sep ? sep : Sep); com | getline; close(com) 
#  }

# More Stuff
# ----------

# Other stuff
# ___________

# More Other Stuff
# ________________


# HELLO
# =====

#  function loadFillers(file,fillers,   i) {
#    slurp("cat " file);
#    for(i=2; i<=NF; i += 2) 
#      fillers[trim($i)] = trim($(i+1));
#  }
#  function fill(file,fillers,   i) {
#    slurp("wget -q -O - " file);
#    for(i=2; i<=NF; i += 2)  
#      $i = fillers[trim($i)]; 
#    OFS="";
#    print $0;
#  }
#  function loadMap(file,   i) {
#    RS="\n"; FS=";";
#    while((getline < file) > 0) 
#      if (NF > 1) {
#        for(i=1;i<=NF;i++) 
# 	 $i = trim($i);
#        siteMapLine(); }
#  }
#  function siteMapLine(        parts,tmp,stem,i) {
#    parts = split($1,tmp,/\//);
#    stem  = tmp[parts];
#    sub(/\..*/,"",stem);
#    File[stem] = $1; 
#    for(i=2;i<NF;i++) {
#      stack(Cats,$1,$i); # files tp cats
#      stack(Stac,$i,$1); # cats to files
#    }
#    Title[$1] = $NF;
#  }

# here is something else

#  function queryString(tags,files,   var,used,cats,n,tmp,i,isa,title) {
#    n = split(ENVIRON["QUERY_STRING"],tmp,"&");
#    for(i=1;i<=n;i++) {
#      tmp[i] = prepVar(tmp[i])
#        isa[i] = recognizer(var)
#        if (isa[i] == "category") cats++
#    }
#    for(i=1; i<=n; i++) {
#      var = tmp[i];
#      if (isa[i] == "set")      set(var	,tags);
#      if (isa[i] == "file")     title = file(var,tags,1,used,files) ;
#      if (isa[i] == "shortcut") category(var,tags,1,used,files);
#      if (isa[i] == "category") title = title " " category(var,tags,cats,used,files);
#    } 
#    return title; 
#  }

#  function prepVar(var) { 
#    var = trim(var);
#    gsub(/_/,".",var);
#    gsub(/\+/," ",var);
#    return var;
#  }
#  function recognizer(var) {
#    if (var ~ /=/) return "set";
#    if (var ~ /^[a-z_]/) {
#      if (var ~ /\//     ) return "file";
#      if (var ~ /\.html$/) return "file";
#      return "shortcut";
#    }
#    return "category";
#  }
#  function set(var,tags,   tmp) { # make a config setting
#    split(var,tmp,"=");
#    tags[trim(tmp[1])] = trim(tmp[2])
#  }
#  function shortcut(var,tags,needs,used,files) { # shortcut to file 
#    var=  (var in File) ? File[var] : tags["default"];
#    file(var,tags,needs,used,files);
#  }	
#  function file(var,tags,needs,used,files, title) { # add file
#    title=" ";
#    var = (var in Title) ? var : tags["default"];
#    if (++used[var] == needs ) {
#      push(files,var);
#      title = " " Title[var]; }
#    return title;
#  }
#  function category(var,tags,needs,used,files,     i,n) {#add files from cats
#   n =cards(Stac,var);
#   for(i=1;i<=n;i++) 
#     file(Stac[var,i],tags,needs,used,files);
#   return var;
#  }
#  function push(a,value)  { a[++a[0]] = value }
#  function stack(a,key,value) { a[key,++a[key,0]] = value }
#  function cards(a,key)       { return a[key,0] }
#  function card(a,key,n)      { return a[key,n] }
#  function trim(s)            { 
#    sub(/^[ \t\r\n]*/,"",s); sub(/[ \t\r\n]*$/,"",s); return s; 
#  }
#  function o(a,str,   com, i) {
#   if(! com)  
#     com = "sort -k 3 #" rand();
#   print "<ul>" | com;
#   for(i in a)
#     print "<li> " str "[ " i " ] = " a[i] | com;
#   print "</ul>" | com;
#   close(com);    
#  }

# TODO:  
#    example plugin for random quotes, for rss
#  specials, have commas in them
#  uuper case are built in
#  error tests for nil file, nil tags
#  caregory conjunctions
#  rss reader
#  two cents http://www.reverseshot.com/files/images/issue21/two_cents_0.jpg
