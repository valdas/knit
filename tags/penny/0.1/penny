#!/opt/local/bin/gawk -f 

# This file was auto-generated by KNIT. Do not edit this file! 
# Built on Wed Jan 27 09:07:25 EST 2010 by timm. 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# trim.awk 
 function trim(s) {
	sub(/^[ \t\r\n]*/,"",s)
	sub(/[ \t\r\n]*$/,"",s)
	return s
 } 

# math.awk 
 BEGIN { Pi = 3.14159265
         E  = 2.71828183 
       }
 function oddp(x)  { return (x % 2) }
 function evenp(x) { return (! oddp(x)) }
 function round(x) { return int(x + 0.5) }

# slots.awk 
 function slots(slotsFile,frameFile,      values,sep) {
     sep="`""`"
     loadSlots(slotsFile,sep,values)   
     fillFrame(frameFile,sep,values)
 }
 function loadSlots(slots,sep,values,   n,i,all) {
     n=slurp(slots,all,sep)
     for(i=2; i<=n; i += 2) 
	 values[trim(all[i])] = trim(all[i+1]);
 }
 function fillFrame(frame,sep,values,   all,n,i) {
     print fillFrame2String(frame,sep,values)
 }
 function fillFrame2String(frame,sep,values,   all,n,i,str) {
     n=slurp(frame,all,sep);
     for(i=1; i<=n; i++)  
	 str = str sprintf("%s", (oddp(i) ? all[i] : fillSlot(all[i],values)))
     return str
 } 
 function fillSlot(str,values) {
     return (str ~ /;/ ? slotsPlugIns(str,values) : values[str])
}

# basename.awk 
 function basename(path,  n,tmp) {
    n = split(path,tmp,/\//)
    return tmp[n]
 }

# phrases.awk 
 function phrases(str,sep,a,   n,i) {
    n=split(str,a,sep)
    for(i=1;i<=n;i++)
	a[i]= trim(a[i])
    return n
 }

# o.awk 
 function o(a, str,control,   i,com) {
     str = str ? str : "array"
     if (control ~ /^[0-9]/)  {
         if (control==0)
             o1(a,str)
	 else
             for(i=1;i<=control;i++)
                 print oprim(str,i,a)
     } else
	 if (0 in a)        # sometimes i store array size in a[0]
	     o(a,str,a[0])         
         else {
             com = control ? control : " -n -k 2" 
             com = "sort " com  " #" rand(); # ensure com is unique
             for(i in a)
                 print oprim(str,i,a) | com;
             close(com); }
 }
 function oprim(str,i,a,  j) {
     j=i
     gsub(SUBSEP,",",j) 
     return str "[ " j " ]\t=\t [ " a[i] " ]"
 }
 function oo(a,str, i) {
     for(i in a)
         print oprim(str,i,a)
 }
 function oos(a1,str1,a2,str2,a3,str3,a4,str4,a5,str5) {
     if(str1) oo(a1,str1);
     if(str2) oo(a2,str2);
     if(str3) oo(a3,str3);
     if(str4) oo(a4,str4);
     if(str5) oo(a5,str5)
 }
 function os(a1,str1,a2,str2,a3,str3,a4,str4,a5,str5) {
     if(str1) o(a1,str1);
     if(str2) o(a2,str2);
     if(str3) o(a3,str3);
     if(str4) o(a4,str4);
     if(str5) o(a5,str5)
 }

# stack.awk 
 function push(s,item,  i) {      
     i    = ++s[0]
     s[i] = item
     return i
 }
 function pop(s, i,item) { 
     i    = s[0]--
     item = s[i]
     delete s[i]
     return item
 }
 function push2(c,key,item,   i)  {
     i = ++c[key,0]
     c[key,i] = item
     return i 
 }
 function cards(c,key) { 
     return c[key,0] 
 }
 function card(c,key,n) { 
     return c[key,n] 
 }

# deShell.awk 
 function deShell(str) {
     gsub(/["`\$;\|&><]/,"",str);
     return str
 }

# slurp.awk 
 function slurp(com,all, sep) { 
     return split(slurp2String(com),
		  all, 
		  (sep ? sep : "\n")) 
 }
 function slurp2String(com,    txt,filename,fnr,nf,nr,rs,fs ) {
     filename=FILENAME;fnr=FNR;nf=NF;nr=NR;rs=RS;fs=FS;
     RS="\r\r\n"; FS="\r\r\n"; # change globals 
     com = deShell(com)        # make 'com0' safe
     com | getline txt ;       # everything is in 'txt'
     close(com);               # close pipe
     FILENAME=filename;FNR=fnr;NF=nf;NR=nr;RS=rs;FS=fs;
     return txt                # the end
 }

# tags.awk 
 function loadTags(ins,files,titles,tags,sgat,     maxLines,i,lines,items,n) {
     maxLines = slurp(ins,lines)
     for(i=1;i<=maxLines;i++) {  
         n = phrases(trim(lines[i]),";",items)
         if (n) 
             tagLine(items,n,files,titles,tags,sgat); 
     }
 } 
 function tagLine(items,n,files,titles,tags,sgat,  dirname,f,i,name) {
      dirname = items[1]
      name    = items[n]
      titles[dirname] = name
      f    = basename(dirname)
      files[gensub(/\..*/,"","g",f)] = dirname; 
      for(i=2;i<n;i++) {
          push2(tags,dirname,items[i]); # files to cats
          push2(sgat,items[i],dirname); # cats to files
      }
  } 

# queryString.awk 
 function testQueryString(tagsFile,str,     files,titles,tags,sgat,out) {
     loadTags(tagsFile,files,titles,tags,sgat)
     print queryString1(str,tags,files,titles,sgat,out)
     o(out,"out")
 }
 function queryString(tags,files,titles,sgat,out) {
     queryString(ENVIRON["QUERY_STRING"],tags,files,titles,sgat,out) 
 }
 function queryString1(query,tags,files,titles,sgat,out,   \
                       var,used,seen,cats,n,tmp,i,is,title) {
   n = split(query,tmp,"&");
   for(i=1;i<=n;i++) {
        tmp[i] = qprepVar(tmp[i])
        is[i] = qrecognizer(tmp[i])
        if (is[i] == "category") cats++
   }
   for(i=1; i<=n; i++) {
     var = tmp[i];
     if (is[i]=="title")     
         title = qtitle(var);
     if (is[i]=="file")     
         title = title " " qfile(var,tags,1,        seen,used,files,titles,sgat,out);
     if (is[i]=="shortcut") 
         title = title " " qshortcut(var,tags,1,    seen,used,files,titles,sgat,out);
     if (is[i]=="category") 
         title = title " " qcategory(var,tags,cats, seen,used,files,titles,sgat,out);
   } 
   return title; 
 }
 function qprepVar(var) { 
   var = trim(var);
   gsub(/_/,".",var);
   gsub(/\+/," ",var);
   return deShell(var);
 }
 function qrecognizer(var) {
   if (var ~ /^title=/) return "title";
   if (var ~ /^[a-z_0-9]/) {
     if (var ~ /\//     ) return "file";
     if (var ~ /\.html$/) return "file";
     return "shortcut";
   }
   return "category";
 }
 function qtitle(var,  tmp) {
     split(var,tmp,"=")
     return trim(tmp[2])
 }
 function qshortcut(var,tags,needs,seen,used,files,titles,sgat,out) { # shortcut to file 
   var=  (var in files) ? files[var] : tags["NotFound"];
   return qfile(var,tags,needs,seen,used,files,titles,sgat,out);
 }	
 function qfile(var,tags,needs,seen,used,files,titles,sgat,out,   title) { # add file
   title=" ";
   var = (var in titles) ? var : tags["default"];
   if (++used[var] == needs ) 
       if(++seen[var] ==  1) {
           push(out,var);
           title = " " titles[var]; }
   return title;
 }
 function qcategory(var,tags,needs,seen,used,files,titles,sgat,out,     i,n) {#add files from cats
     n =cards(sgat,var);
     for(i=1;i<=n;i++) 
         qfile(sgat[var,i],tags,needs,seen,used,files,titles,sgat,out);
     return var;
 }

# wget.awk 
 function demoWget(   n,all,url) {
     url="knit.googlecode.com/svn/branches/0.2/quill/etc/tests/demoWget.rss"
     n=wget(url,all,">")
     o(all,"wget",n) 
 }
 function wget(url,all,sep) { 
    return slurp("wget -q -O - http://" url,all,sep) 
 }

# myrss.awk 
 function demoRss() {  
     print "<ul>"
     print  "<li>" myrss("lawker.blogspot.com/feeds/posts/default?alt=rss",
			 5,
			 "\n<li>")  
     print "</ul>"
 }
 function myrss(feed,max,between,              \
                 date,url,author,link,txt,title,	\
                n,all,sep,out,seen,x,i) {
     n = wget(feed,all,">");
     for(i=1;i<=n; i++) {
	 x= all[i]= trim(all[i])
         # parse the items
	 if      (x ~ /^<pubDate/ )    date   = myDate(all,i)
	 else if (x ~ /^<description/) txt    = myText(all,i)
	 else if (x ~ /^<title/)       title  = myField(all,i)
	 else if (x ~ /^<author/)      author = myField(all,i)
	 else if (x ~ /^<link/)        link   = myField(all,i)
	 else if (x ~ /^<enclosure/)   url    = myEnclosure(all,i);
         # if we have everything, generate an output
	 if (date && txt && title && author && link && url) {
	     out = out sep myReport(url,date,title,author,link,txt);
	     sep = between ? between : "\n";
	     date = txt = title = author = link = url = ""
	     if (++seen >= max) 
		 return out;
	 }}
     return out;
 }
 function myField(all,i,    str) {
     str = all[i+1] 
     sub(/<.*/,"",str);    
     return str 
 }
 function myDate(all,i, tmp) {
    split(all[i+1],tmp," ");   
    return trim(tmp[3]  " " tmp[2])
 } 
 function myText(all,i,    str) {
     str = all[i+1] 
     sub(/&lt;.*/,"",str); 
     return trim(str) 
 }
 function myEnclosure(all,i,   tmp) {
     split(all[i],tmp,/'/);
     return trim(tmp[4])
 }
 function myReport(url,date,title,author,link,txt) {
     return "<a href=\"" url "\">" date "</a>:\n " txt
 }

# seed.awk 
 function seed() {
    srand(Seed ? Seed : 1)
 }

# s2a.awk 
 function s2a(str,a,  sep,  tmp,n,i) {
     sep = sep ? sep : ","
     n= split(str,tmp,sep)
     for(i=1;i<=n;i+=2) 
	 a[trim(tmp[i])]= trim(tmp[i+1])
     return n/2
 }

# bias.awk 
 function sample(population,cdf,memo,   count,one) { 
     for(one in population) 
         count[population[one]]++
     return sampleCounts(count,cdf,memo)
 }
 function sampleCounts(counts,cdf,memo,   all, one,x,f,i) {
     for(one in counts)
         all += counts[one]
     for(one in counts) {
         x = (1000*counts[one]/all)+ rand()/100
         f[++i]= x
         memo[x] = one
     }
     a2cdf(f,cdf)
     return i
 }
 function a2cdf(a,cdf, sorted,n) {
     n= a2best(a,sorted)
     return sorted2cdf(n,sorted,cdf)
 }
 function a2best(a,best,  max,    sorted,n,i,j) {
                #must     opt     local
     n = asort(a,sorted);
     if (max && n >= max) {
         for(i = n - max + 1; i<=n; i++)
             best[++j] = sorted[i];
         n= max;
     } 
     else 
         for(i in sorted)
             best[i]=sorted[i];
     return n;
 }
 function sorted2cdf(n,sorted,cdf,    i,j,sum) {
     if (! (1 in sorted)) 
         return (cdf[0]=split("",cdf,""))
     sum = cdf[1] = sorted[1];
     for(i=2;i<=n;i++) { 
         sum += sorted[i];
         cdf[i] = cdf[i-1] + sorted[i];
     }
     for(i in cdf)  
         cdf[i] = cdf[i] / sum;
     for(i=1;i<=n;i++)
         cdf[-1*i] = sorted[i]
     cdf[0]=n
     return n
 }
 function pick(cdf,  skew,   i) {
               #must   opt     local
     i = pick1(cdf,cdf[0],skew)
     return cdf[-1*i]
 }
 function pick1(cdf,n,  skew,u,i,here) {
     skew = skew ? skew : 1
     u = rand()^skew 
     for(i=n-1;i>=1;i--) 
         if (u > cdf[i] ) 
             return i+1;
     return 1;
 }

# a2s.awk 
 function a2s(a,sep,  start, stop,  tmp, out,i) { 
     sep   = sep   ? sep   : ","
     start = start ? start : 1
     stop  = stop  ? stop  : a[0]
     out = a[start]
     for(i=start+1;i<=stop;i++)
	out = out sep a[i]     
     return out
 }

# anyStrings.awk 
 function anyStrings(string,   skew,repeats,sep,             \
                     pmax, paras,para,lines,freq, thing,cdf,memo,out) {
     skew    = skew    ? skew    : 1
     repeats = repeats ? repeats : 1
     sep     = sep     ? sep     : "\n"
     pmax = split(string,paras,/\n\n/)     
     for(para=1; para<=pmax; para++) {
         lines[0]    = split(paras[para],lines,/\n/)       
         thing       = trim(a2s(lines,"\n",2))
         freq[thing] = lines[1] + 0
     }
     sampleCounts(freq,cdf,memo)
     while(repeats--) 
         push(out,  memo[pick(cdf,skew)])
     return a2s(out,sep)
 }

# warning.awk 
 function warning(str) {
     print "# ERROR: " str   >> "/dev/stderr";
     fflush("/dev/stderr");
 }

# barph.awk 
 function barph(str) {
     warning(str)
     exit 1; 
 }

# penny.awk 
 function penny(config) {
     return penny1("http://" config,ENVIRON["QUERY_STRING"])
 }
 function penny1(slotsFile,query,     \
                 wget,sep,values,files,titles,tags,sgat,pages,file,url,content,content0,stem,out) {     
     seed()
     wget = "wget -qO - "
     sep="``"
     loadSlots(wget slotsFile,sep,values) # get all the short string values
     loadTags(wget values["Tags"],   files,titles,tags,sgat) # get all the page tags
     values["Header"]=queryString1(query,tags,files,titles,sgat,pages) # list pages
     values["Content"]="" 
     if (pages[0] == 0)
         push(pages,values["Default"])
     for(i=1;i<=pages[0];i++) {
         file     = values["File"] = pages[i]
         stem     = gensub(/.html/,"","g",file)
         url      = values["Url"]  = values["Site"] "/" file
         content0 = fillFrame2String(wget url,sep,values)
         content0 = gensub(/<h1>([^<]*)<\/h1>/,
	                       "<h1><a href=\"?"stem"\">\\1</a></h1>",
                           "g",content0)
         content  = content content0
     } 
     values["Content"] = content
     fillFrame(wget values["Template"],sep,values)     
 }
 function slotsPlugIns(string,values,      tmp) {   
     split(string,tmp,";")
     if (tmp[1]=="rss")
         return  "<p id=\"rss\">" myrss(tmp[2],tmp[3],"<p id=\"rss\">")
     if (tmp[1]="any")
         return anyStrings(values[tmp[2]],tmp[3],1)
     barph("(" string ") ???") 
 }
