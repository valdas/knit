I teach at a university and the other day I told a graduate student  to try coding up something.

"Get a test engine going and log some expected outputs.  Imagine some ideal notation and code that up as a domain=specific language.
Use some Monte Carlo simulations and some data mining to find and retire any uncertainties in the code.
When you are done, document your code to make it web browsable. And do it all in a content management system so that we can track the revisions."

They said "huh?"

-----

This book will make you a programming wizard using a language called Awk. 
Awk is a magical language- it is invisible.  
If you code in Awk, the language very quickly disappears:

- Since the langauge is very simple,
you can very quickly get the learning curve out of the way.

- Since the language does not offer complex (and possibly confusing) modeling tricks, you can't delay diving into the
details of the task at hand. 

There is nothing between an Awk programmer and the task at hand:

- No clever contructs like pointers, inheritance, continuations,
lamda bodies, etc. So you won't ever lose days of your life to
figure out some acrane feature of the language.

- No elaborate integrated development environment. So you won't
spend your days endlessly tinker and tuning your tools.

- No large libries that confuse, rather than clarify, the solution.
So you won't even get lost in volominous documentation trying to
understand overly-complex code.

With Awk, there is nothing else to do EXPECT understand the structure
of the problem, and how you might transform it into a workable
solutions. With Awk, you start on the solution sooner and deliver
your system faster. 

Best of all, Awk is such a simple language that it
will not let you deliver overly-complex solutions.
Now Awk has a reputation of being an overly simplistic
languages. Usually this is said by someone claiming that such
simplicity is a bad thing.  This claim is just plain crazy.  Has the
software producity problem has been solved by ADDING complexity to our
our programming languages? I don't think so.

Because of its simplicity, Awk dissolves complexity.  Awk lets you
quickly building and refining protypes.  Hence, it is a great language
for maturing your understanding of what is going on, for finding the
simplicity within a seemingly difficult problem.  And Awk is a test of
that understanding.  If a solution is complex to code in Awk, that
usually means you don't yet sufficiently understand the problem.

But this introduction should not convince you. It is only words and
programmers have seen too many words from too many snake oil sales
people trying to sell the next greatest thing. In this book, I offer
examples of the magic of Awk- tiny programs to achieve seemingly
complex tasks. 

You may read my code and say "that's not so hard- you've cut
corners". And I smile my biggest Cheshire Cat smile and reply "thank
you- yes, thanks to the power of prototyping in Awk, I know what
corners to cut". Fred Brooks, the author of the Mythical Man Month,
was right.  In most systems, code bloat comes from feature creep.
Progammers win when they throw away surpflous details.  Knowing what
not to code is an important productivity tool.

Having proudly waved the Awk flag, I rush to add that there is at
least one kind of software I would never code in Awk. Awk runs slower
than languages that compile to native machine code so for systems
programming where response time is very important, I'd use a compiled
language. So I'd never code an operating system in Awk, or the
safety-critical guidance system of a manned rocket.  But before I code
in something as arcane and error-prone as (say) "C", I'd first use a
fast prototyping language, like Awk, to quickly explore alternative
designs and to prune surplfous details.

XXX all awk programmers know this. be quiet or i will replace you with one very small shell script

In order to demonstrate the magic of smimple Awk XXX.
This book offers code for seemingly complex tasks like
content management systems, data miners, and LISP interpreters.
The code to implement these tasks is surprisingly simple.

I have written commercial systems in many sophisticated languages
(Smalltalk, LISP, Prolog) and still I keep coming back to the
hyper-productive Awk language.  Programming and understanding complex
systems is my stock-in-trade.  I've written over 180 reserach papers
and I supervise a large herd of nerds trying to write better papers.
Every year, I face the next generation of graduate students trained
in the latest fashion (this year it is Java Script, Lua, Erlang and
Go; next year, who knows?).  Each year, I expect that they will run
rings around me.  So far, it hasn't happenned. By the time they
configure their JAVA GUIs or download and install their ECIPSE plug
ins or (insert your favorite set-up activity here), the semester
is over and they still haven't gotten to the real task at hand.
Meanwhile, I can code in a few days an Awk prototype that implements
functionality that has never been achieved before.

Why isn't the language used more? I can only speculate but I think
it has something to do with the main loop of Awk. If you want to
write and combine tools then, by definition, a function that is the
boss in one program has to be a sub-routine in another program.
However, most Awk documentation places the functionality in an outer
main-loop. This makes it hard to build your own personel library
of parts that can be mixed and matched for future tasks.

So I wrote this book. In it, I list a whole bunch of tricks that are different
to usual Awk code. For example, this book moves most of the code into functions and, as
much as possible, data is moved out of the global space and into function parameters.
Also, this book emphasises the use 

to be a large set of distractions so that no one notices we are not actually  adding value or understanding to the task at hand. 

So far, I can still run rings around them. XXXX. However, so far, I can code up in a few days something novel in Awk
that becomes the basis of  prottoype of something in Awk in a few days
that is t



In Awk, you are thrown into the solution space without adding in more conflating details to the problem space.
If you code in Awk, there is no set up before you dive into the problem since There is so little to  configure.

The language is a pattern processor. It is a transforming
language that works best when it transforms inputs to better strctured outputs.

complicate the path to a solution. They are too clever. For example, I used to do a lot of object-oriented programming. Inspired
by the Design Patterns book, I worked up some really clever supposedly reuable abstract classes. And guess what? I rarely reused
any of it.
My Smalltalk experience was particularly painful.
I spent all my time customizing the environment with so-called productivity extensions. I spent so much time
getting productive that I rarely got the actual job done. 

And its not just OO. Functional languages can be just as bad. I love LISP- it is my addiction. But one day I stepped back from
my macros that wrote macros that coded idioms in my requirements documents and asked "why am I doing this?. Why am I spending
all this time using distracting languages?".

With Awk, there is nothing to distract you. no 



Before you can do anything in C++, for example, you must face the horror of the standard template
library. JAVA programmers love the ECLIPSE IDE, which is a nice tool but you can get lost in the  is a langauge for wizards. This book will 
